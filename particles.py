# -*- coding: utf-8 -*-
"""particles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HzhBU_Vb9dLXq2Akw-wW3oAlLD5jgyg4
"""

import numpy as np
import matplotlib.pyplot as plt

RABBIT=0
WOLF=1
L=10 
TRD=100   #RABBIT DIES IF ALIVE FOR
TWD=50    #WOLF DIES IF HUNGRY FOR
PRR=0.02  #RABBIT REPLICATION PROBABILITY
PWE=0.02  #PROBABILITY WOLF EATS A NEARBY RABBIT
PWR=0.02  #WOLF REPLICATION PROBABILITY
SIGMA=0.5 #STEP SIZE PARAMETER
maxiter=2500

class Animal:

  def __init__(self,x0,y0,species,life):
    self.x=x0
    self.y=y0
    self.species=species
    self.life=life
    self.isAlive=True

  @classmethod
  def replicate(clas,x0,y0,species):
      child=clas(x0,y0,species,life=0)
      return child
  
  def isOld(self):
    self.life+=1
    if self.species==RABBIT and self.life>=100:
        self.die()
    elif self.species==WOLF and self.life>=50:
        self.die()
    

  def getpos(self):
    return self.x,self.y

  def interact(self,other):
    if np.random.randint(1,101) in [1,2]:#PWE check
      other.die()
      self.life=0
      return True
    return False
      
  def die(self):
    self.isAlive=False

  def move(self):
      self.x+=np.random.normal(0,SIGMA)
      self.y+=np.random.normal(0,SIGMA)

      #APPLYING PERIODIC BOUNDARY
      self.x=self.x%L
      self.y=self.y%L

init_rabbit=900
init_wolf=100
population=[]

xpos=np.linspace(0,10,num=1000)
ypos=np.linspace(0,10,num=1000)

coords = np.transpose([np.tile(xpos, len(ypos)), np.repeat(ypos, len(xpos))])
randcoords = np.around(np.random.permutation(coords),decimals=2)
rabbitcoords = randcoords[:init_rabbit]
wolfcoords = randcoords[init_rabbit:(init_wolf + init_rabbit)]

init_life_rabbit=np.random.randint(1,101,size=900)
init_life_wolf=np.random.randint(1,51,size=100)
# rng = np.random.default_rng(100)

r_agents=[]
w_agents=[]

for k,i in  enumerate(rabbitcoords):
    agent=Animal(i[0],i[1],RABBIT,init_life_rabbit[k])
    r_agents.append(agent)

for k,i in  enumerate(wolfcoords):
    agent=Animal(i[0],i[1],RABBIT,init_life_wolf[k])
    w_agents.append(agent)

for i in range(maxiter):
  wolfchild=[]
  rchild=[]
  #wolf checks its surroundings
  wcx,wcy=[],[]
  rcx,rcy=[],[]
  for wolf in w_agents:
    wx,wy=wolf.getpos()
    wcx.append(wx)
    wcy.append(wy)
    #looping through rabbits
    for rabbit in r_agents:
      rx,ry=rabbit.getpos()
      rcx.append(rx)
      rcy.append(ry)

      #periodic distance check
      dx = np.mod(wx - rx + L / 2, L) - L / 2
      dy = np.mod(wy - ry + L / 2, L) - L / 2      
      #checking if rabbit in the required distance
      if dx<=0.5 and dy<=0.5:
        if np.sqrt(dx**2+dy**2)<=0.5:
          #checking if rabbit dies and if wolf replicates
          if wolf.interact(rabbit) and np.random.randint(1,101) in [1,2]:#PWR check
            wolfchild.append(wolf.replicate(wx,wy,species=WOLF))
    r_agents = [agent for agent in r_agents if agent.isAlive]  
  r_agents = [animal.isOld() for animal in r_agents]
  w_agents = [animal.isOld() for animal in w_agents]

  #checking if rabbit replicates                        
  for rabbit in r_agents:
    if rabbit.isAlive and np.random.randint(1,101) in [1,2]:#PRR check
      rchild.append(rabbit.replicate(rabbit.x,rabbit.y,species=RABBIT))
  
  w_agents=[agent for agent in w_agents if agent.isAlive]+wolfchild
  r_agents=[agent for agent in r_agents if agent.isAlive]+rchild
      
  r_agents = [animal.move() for animal in r_agents]
  w_agents = [animal.move() for animal in w_agents]

  if i%100==0:
    plt.figure(figsize=[10,10])
    plt.scatter(rcx,rcy,marker='o')
    plt.scatter(wcx,wcy,marker='+',color='red')
    plt.savefig(f'{i}.png',dpi=300)